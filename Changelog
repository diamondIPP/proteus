.. -*-rst-*-

=========
Changelog
=========

v1.2.0 (to be released)
=======================

User-visible changes
--------------------

*   Remove Judith-style ``proteus`` tool.
*   Remove support for custom ini-like config format and custom mask
    file format.
*   Efficiencies are calculated for the selected area only, i.e. the
    whole sensor or a sensor region, and the area is not enlarged by
    two pixels anymore.
*   The coarse alignment uses the peak position of the cluster distance
    distribution instead of the mean. This should make it more robust
    for noisy sensors at the expense of limiting the precision to
    approximately one pixel.
*   The ``activate.sh`` script is also copied during the ``install`` phase.
*   The TTree-based match output stores the hit information for each hit
    in a cluster in addition to the combined cluster information.
*   An missing or unreadable pixel masks file is now considered a fatal
    error, consistent with how all other configuration files are handled.

Bugfixes
--------

*   Example configurations in the test directory use valid toml syntax.
*   Only the geometry file that is used is read in. When the geometry is
    set via a command line flag, the geometry file specified in the
    device file is not read. This also allows device files without a
    predefined geometry.

Internal changes
----------------

*   Remove code that has been replaced or that has become
    obsolete. Disable code that is currently unused but should be
    ported to the new APIs in the future.
*   Fully replace ``SingleAnalyzer`` with ``Analyzer`` interface.
*   Clean up event loop specific timing measurements and event statistics.
*   Enabling the documentation building must be explicitely requested by
    addding ``-DPROTEUS_ENABLE_DOC=on`` to the cmake commandline.

v1.1.3 (2017-03-21)
===================

Bugfixes
--------

*   Running without the ``-n/--num_events`` on macOS now correctly uses
    all available events (issue 45).

v1.1.2 (2017-03-13)
===================

Bugfixes
--------

*   Fix the limit calculation in ``Utils::DenseMask``. This fixes a
    problem when reading in noise masks.

v1.1.1 (2017-03-13)
===================

Bugfixes
--------

*   Fix expected hit density calculation in noise scan. The density is
    now correctly calculated for the edge pixels.

v1.1.0 (2017-03-12)
===================

User-visible changes
--------------------

*   Add support for sensor regions.

    Multiple, exclusive regions can be defined on a sensor that are
    treated independently in the analysis. The clusterizer will create
    clusters only from hits that belong to the same regions. Many
    analyzers will automatically produce separate histograms for each
    region.

*   Add support for basic sensor-level and in-pixel efficiency.

    Efficiency histograms are calculated when running ``pt-match``
    based on the fitted track positions and the matched cluster
    information. If regions are configured, efficiencies are
    calculated separately for each region.

*   Correlations are calculated according to the ordering of the
    sensors along the z-axis.
*   Extend and update the TTree output from ``pt-match``.

    Event variables are prefixed with ``evt_...`` instead of
    ``ev_...``. Matching variables are prefixed with ``mat_...``
    instead of not being prefixed at all. The track quality
    parameters, e.g. :math:`\chi^2`, are stored separately as
    ``trk_chi2``, ``trk_dof``, ``trk_nclusters``. Position
    uncertainties in the local system for both tracks and clusters are
    stored in ``..._std_u``, ``..._std_v``, and ``..._corr_uv``.
    Cluster time and value are stored as ```..._time`` and ``..._value``.

*   Use consistent histogram names, ranges, and units.

    In the hit analyzer: rename ``TimeMap``, ``ValueMap`` to
    ``MeanTimeMap``, ``MeanValueMap`` and remove the duplicate
    ``HitMap`` histogram.
    In the occupancy analyzer: remove sub-pixel binning in cluster map,
    use consistent histogram ranges, rename occupancy distributions to
    ``...OccupancyDist``.
    In the noise scan: use ``...Dist`` suffix for per-pixel
    distribution histograms instead of ``...Pixels``.
    The occupancy is consistently measured in hits per pixel per event
    or clusters per pixel per event.

*   ``pt-align`` uses the absolute geometry parameters instead of the
    corrections in the alignment convergence plots.
*   Add ``-m/--mask`` command line flag to most tools.

    The flag can be used to load extra pixel mask files in addition to
    the ones already specified in the device configuration. This flag
    can occur multiple times.
*   Add a ``--quiet`` command line flag to only output errors and a
    ``--debug`` command line flags to increase verbosity.
*   Add ``--no-progress`` command line flag to disable the progress bar.
*   Add a ``install`` build target that installs the binaries.
*   Sensors without a specified name are named ``sensor<ID>`` where
    ``<ID>`` is the internal sensor number.

Internal changes
----------------

*   Clean up arguments parser and print ``DEBUG(...)`` messages only in
    debug builds.
*   Add the ``Analyzers::BasicEfficiency`` class that implements basic
    efficiency estimations.
*   The continous integration builds the software with different compilers
    and ROOT versions.
*   Add ``Utils::DenseMask`` class to handle pixel masks in the
    clusterizer and in the efficiency analyzer. This replaces the
    manual mask handling in the sensor classes.
*   Add support for enlarging ``Utils::Interval`` and ``Utils::Box``.
*   ``pt-align`` writes out the new geometry after each step and not
    only at the end.
*   The progress bar determines its default size from the width of the
    terminal window instead of using a fixed size.

Bug fixes
---------

*   Fix intersection and enclosure calculations with empty intervals in
    ``Utils::Interval`` and ``Utils::Box``.
*   Fix kernel boundaries in the density estimation in
    ``Analyzers::NoiseScan``.

v1.0.0 (2017-02-07)
===================

This is the first version after a major refactoring. The basic design has not
changed much, but the internal structure and the user interface has undergone
significant changes. Users of the Judith software should be able to easily
convert their existing configurations to equivalent Proteus configurations.
However, this can not be done automatically and manual intervention is
required.

Starting from this version the software is released under the terms of
the MIT License and the documentation is released under the terms of
the Creative Commons Attribution 4.0 International Public License.

User-visible changes
--------------------

*   The software requires a C++11 compatible compiler and uses the
    `CMake <https://cmake.org>`_ build system.
*   All configuration files use the `TOML file format
    <https://github.com/toml-lang/toml>`_.
*   The software uses a single, combined data stream as input that
    includes all telescope sensors and all devices-under-tests. There
    is no explicit distinction anymore between telescope sensors and
    device-under-test sensors.
*   The single Judith/proteus binary is split into multiple tools,
    i.e. *pt-noisescan*, *pt-align*, *pt-track*, *pt-match*, that each
    perform one specific task.
*   A new tool *pt-cfg* is available that checks configuration files and
    displays them.
*   The updated noise scan takes into account inhomogeneous occupancy
    distributions, e.g. due to the beam profile, and allows per-sensor
    configuration.
*   The alignment algorithm is simplified to be more robust for strong
    misalignment.
*   Pixel preprocessing, e.g. FE-I4 to CCPDv4 pixel mapping, and
    clusterization are fully integrated into the default analysis
    chain and do not require separate, manual steps.
*   Fitted track positions and device-under-test clusters are available
    also in a simple ``TTree``-based output format to allow specific
    analyses not covered by the existing tools.
*   The intermediate output ROOT file format, specifically the content
    of the ``TTree``s, only contains the necessary local
    information. The positions and uncertainties in the global
    coordinate system are calculated automatically by the software.
    The input format is unchanged but any global position information
    is ignored.

Internal changes
----------------

*   All tools are now based on a generic event loop with configurable
    algorithms.
*   All geometry calculations are now based on ``ROOT::GenVector`` and
    correctly take into account the full rotation matrix and
    translation. Reconstruction and analysis is always performed in
    the local system of the sensor to be able to correctly handle
    missalignments and rotated sensors. The different transformations
    are fully included in the uncertainty calculations without
    additional constraints on the sensor orientation.
*   Uncertainty calculations and propagations use the full covariance
    matrix for both cluster and track uncertainties.
*   Search and matching cuts take into account the full covariance
    matrices.  The resulting `weighted distance measure
    <https://en.wikipedia.org/wiki/Mahalanobis_distance>`_ is used
    consistently throughout the code base.
*   Use a new non-recursive hit clusterizer with geometrical error
    calculation.  Different cluster property estimators, e.g. for
    binary measurements or for measurements with time-over-threshold
    measurement, are available that can be selected per sensor.
*   Updated track finder with fully configurable input sensors and
    global selection of the best candidates, i.e. tracks are selected
    from all found candidates with an exclusive association of
    clusters to tracks.
*   A continous build system is setup that compiles the software and
    runs example analyses on a regular basis.

Changes before v1.0.0
=====================

2016-03-06 B. Ristic <bristic@cern.ch>

* bugfix: ProcessEvent now respects calcIntercepts setting
* bugfix: intercepts tree readback
* TrackMaker::calculateIntercepts is now static

2016-01-26 L. Meng <lmeng@cern.ch>

* Added Intercepts tree to each plane with local track positions,
  switch "calculate intercepts : true/false" in global.cfg
* Fixed small Mac feature in alignment (_filename.c_str())

2015-11-27 F. Di Bello <fdibello@cern.ch>

* added macro for mapping
* fixed a bug in the Inpixel

2015-11-27 F. Di Bello <fdibello@cern.ch>

* Fixed bug in efficiency.cpp
* Add plot: correlation planes and DUT
* Add plot for different cluster size
* Add plot to study the lvl1 distribution of the DUT
* Change the clustermaker to select the fastest hit

2015-11-xx M. Rimoldi <marco.rimoldi@cern.ch>

* Add Information about the trigger phase that is propagated in the analysis

2015-07-xx M. Rimoldi <marco.rimoldi@cern.ch>

* Bug Fixed in loopers/analysisdut.cpp
* In Analyzers/dutresidual add residual calculation in function of the cluster
  size. Plot name = "X_numcluster" or "Y_numcluster"
* Add new folder called Timing_Efficiency.
* Reorganized the folder in effresult.root
* Add plot timing vs tot for each clustersize ( _TimingTOT_cluster)
* Add cluster distribution (_matchCluster)
* Add Pixel Efficiency in function of the cluster size
  (InPixelEfficiencyCluster)

2015-02-xx S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* fix branch name "HitInCluster" in macros/mergeHVCMOSPixels;
  added copy of SummaryTree
* add printLevel argument to ConfigParser constructor
* add Excepion class (exception.h/cpp)
* new class baseanalyzer, parent of singleanalyzer and dualanalyzer classes
* just one applyCuts function in configanalyzers (using now BaseAnalyzer*
  as function argument)
* tag  JudithFEI4-00-00-12

2015-02-11 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* fix normalization in noiseScan
* new configuration fields for Efficiency analyzer: "min entries lvl1" and
  "min entries lvl1 matchedTracks" added in configs/standard.cfg
* minor fixes / sanity-checks in efficiency.cpp
* tag  JudithFEI4-00-00-11

2015-02-10 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* occupancy distributions per plane instead of just one for whole device
* timing plots vs LVL1 from Javier and Francesco
* tag  JudithFEI4-00-00-10

2015-01-27 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* add alignable boolean private member to sensor class
* more informative message in exception thrown in generateSensors
* NoiseScanConfig class in noisescan.h
* parseComments function in noisemak class
* template ConfigParser::valueToVec; implementation in header file.
* add StorageIO::setNoiseMaskData
* tag  JudithFEI4-00-00-09

2015-01-22 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* add warning message if --runs not given together with applyMask command
* add few cfg files into configs directory
* timer in main.cpp
* tag  JudithFEI4-00-00-08

2015-01-21 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* additional parameters to configuration of Efficiency analizer (standard.cfg)
  "pix x min", "pix x max", "pix y min", "pix y max" to define region for which
  in-pixel results are to be considered
* modified configanalizers.cpp and efficiency.h/.cpp acoordingly
* tag  JudithFEI4-00-00-07

2015-01-21 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* propagate summaryTree into output files
* tag  JudithFEI4-00-00-06

2015-01-20 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* correcting for missing branchName update (HitInCluster) in StorageIO
  constructor
* change _name from const char* to std::string in mechanics/alignment class
* add --runs option to InputArgs class; add corresponding related functions
* change return type of InputArgs::parseArgs from void to int
* change order of arguments in noiseScan to match that of other functions in
  main.cpp
* update clearVariables() and TTree _summaryTree in storageio
* tag  JudithFEI4-00-00-05

2014-11-15 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* add NoiseScan::print()
* change _filename from const char* to std::string in NoiseMask class
* change _nameSuffix (is it used??) from const char* to std::string in
  singleanalyzer class
* change type of _relaxation member from bool to double in finealigndut
* change "max factor" from 10 to 3 in configuration of "Noise Scan" looper
  (global.cfg)
* tag JudithFEI4-00-00-04

2014-11-15 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* fix some compilation warnings:

  * unused private member '_dummyParameter' in analyzers/examplesingleanalyzer
    and analyzers/exampledulanalyzer
  * unused private member '_refOutput' and '_dutOutput' in loopers/examplelooper
  * initialization order in mechanics/sensor constructor

* change _name from const char* to std::string in mechanics/device class
* update in StorageIO constructor "HitInCluster" branch name
* add ConfigParser::print() function
* add printLevel option to inputargs
* tag JudithFEI4-00-00-03

2014-11-15 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* tag JudithFEI4-00-00-02

2014-11-09 F.A. Di Bello <fdibello@cern.ch>

* Only the closest cluster w.r.t. the track is taken into account in the
  residuals.

2014-11-09 F.A. Di Bello <fdibello@cern.ch>

* Do not align the first plane (reference plane).

2014-11-09 F.A. Di Bello <fdibello@cern.ch>

* New occupancy plot XZ, YZ in order to understand the rotations of the sensor.

2014-11-09 F.A. Di Bello <fdibello@cern.ch>

* New alignment plot added in a root file in finealign.cpp .

2014-10-09 J. Bilbao de Mendizabal <bilbao@cern.ch>

* New Inpixel timing resolution. Added iiiiin effeciency.cpp

2014-10-02 J. Bilbao de Mendizabal <bilbao@cern.ch>

* Including the average Lv1 timing for each pixel in dutResults.root
* Subpixel efficiency modification in order to only take into acount the active
  area on the DUT to be properly include in the code.

2014-10-02 J. Bilbao de Mendizabal <bilbao@cern.ch>

* New plot of reconstructed matched tracks position on DUT projection on X and
  Y.

2014-10-02 J. Bilbao de Mendizabal <bilbao@cern.ch>

* New extra step on DUT alignment using the 1D residuals distributions fitting;
  if after first itteration the finealigment using the 2D plot gives 0
  correction and only one DUT is present the loop is stoped.

2014-09-26 J. Bilbao de Mendizabal <bilbao@cern.ch>

* implementation of the pixel timing vs cluster size and hit-ToT included now in
  Cluster Info

2014-09-23 S. Gonzalez-Sevilla <Sergio.Gonzalez.Sevilla@cern.ch>

* import of this package from UniGe/BoostedJets/TelescopeHVCMOS
* create this ChangeLog
* JudithFEI4-00-00-01
