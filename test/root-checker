#!/usr/bin/env python
#
# Check properties of objects inside a ROOT file.
#
# Reads a config files that defines which objects to check in the following
# format. Can be read from file or from stdin.
#
#   # object     property  value
#   dir1/hist1d  entries   1234
#   dir1/hist1d  mean      0.023
#   dir2/tree    entries   1000
#   dir2/hist1d  entries   4567
#   dir2/hist1d  mean      0.023
#   dir2/hist1d  stddev    1.234
#

from __future__ import print_function

import argparse
import io
import os.path
import sys

import ROOT

def main(config_path, root_path):

    # parse input to determine which object should be checked
    if config_path == '-':
        config_file = sys.stdin
    else:
        config_file = io.open(config_path, mode='r', encoding='utf-8')
    config = []
    for line in config_file:
        line = line.strip()
        # drop empty and comment lines
        if not line or line.startswith('#'):
            continue
        # extract configuration entry
        name, type_, value_should = line.split()
        config.append((name, type_, value_should))

    # open the ROOT file to be checked
    root_file = ROOT.TFile.Open(root_path)
    result = True
    for name, type_, value_should in config:
        check = verify_property(root_file, name, type_, value_should)
        result = result and check

    # return success if all tests succeed
    return (0 if result else 1)

def verify_property(directory, name, property_, value_should):
    """
    Verify that the object has a property with the given value.
    """
    # try to get the object
    obj = directory.Get(name.encode('utf-8'))
    if not obj:
        print('{} does not exist'.format(name))
        return False
    # try to access the requested property
    try:
        if property_ == 'entries':
            value_is = obj.GetEntries()
        elif property_ == 'mean':
            value_is = obj.GetMean()
        elif property_ == 'stddev':
            value_is = obj.GetStdDev()
        else:
            print('{} property={} is unknown'.format(name, property_))
            return False
    except AttributeError:
        print('{} property={} is unsupported'.format(name, property_))
        return False
    # check that values match
    if value_is != type(value_is)(value_should):
        fmt = '{} property={} should={} is={}'
        print(fmt.format(name, property_, value_should, value_is))
        return False
    return True

if __name__ == '__main__':
    p = argparse.ArgumentParser('root-checker')
    p.add_argument('config_path', help='use - to read from stdin')
    p.add_argument('root_path', help='')
    args = p.parse_args()
    sys.exit(main(args.config_path, args.root_path))
